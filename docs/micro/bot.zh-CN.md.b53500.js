(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{3216:function(n,s){n.exports={content:["article",["h1","micro bot"],["p",["strong","micro bot"],"是一只藏在微服务中的小马蝇，有了它，我们可以在 Slack、HipChat、XMPP 等等聊天程序中与它对话，通过它来操控服务。"],["p","我们把消息发送给它，它基于这些消息模仿执行 CLI，触发指定的接口功能。"],["p",{align:"center"},["img",{src:"../images/bot.png"}]],["h2","现在支持的输入方式"],["ul",["li",["p","Slack"]],["li",["p","HipChat"]]],["h2","准备上车"],["h3","安装 Micro"],["p","安装 Micro，已经安装跳过"],["pre",{lang:"go",highlighted:'<span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>micro'},["code","go get github.com/micro/micro"]],["h3","slack"],["p","SLACK_TOKEN 需要到",["a",{title:null,href:"https://api.slack.com/tokens"},"Slack"],"上去获取。"],["pre",{lang:"shell",highlighted:'micro bot <span class="token operator">-</span><span class="token operator">-</span>inputs<span class="token operator">=</span>slack <span class="token operator">-</span><span class="token operator">-</span>slack_token<span class="token operator">=</span>SLACK_TOKEN'},["code","micro bot --inputs=slack --slack_token=SLACK_TOKEN"]],["p","效果见图："],["p",["img",{src:"../images/slack.png"}]],["p","-"],["h3","HipChat"],["pre",{lang:"shell",highlighted:'micro bot <span class="token operator">-</span><span class="token operator">-</span>inputs<span class="token operator">=</span>hipchat <span class="token operator">-</span><span class="token operator">-</span>hipchat_username<span class="token operator">=</span>XMPP_USER <span class="token operator">-</span><span class="token operator">-</span>hipchat_password<span class="token operator">=</span>XMPP_PASSWORD'},["code","micro bot --inputs=hipchat --hipchat_username=XMPP_USER --hipchat_password=XMPP_PASSWORD"]],["p","效果见图："],["p",["img",{src:"../images/hipchat.png"}]],["p","-"],["p","如果使用多种机器人，可以使用逗号分隔传入："],["pre",{lang:"shell",highlighted:'micro bot <span class="token operator">-</span><span class="token operator">-</span>inputs<span class="token operator">=</span>hipchat<span class="token punctuation">,</span>slack <span class="token operator">-</span><span class="token operator">-</span>slack_token<span class="token operator">=</span>SLACK_TOKEN <span class="token operator">-</span><span class="token operator">-</span>hipchat_username<span class="token operator">=</span>XMPP_USER <span class="token operator">-</span><span class="token operator">-</span>hipchat_password<span class="token operator">=</span>XMPP_PASSWORD'},["code","micro bot --inputs=hipchat,slack --slack_token=SLACK_TOKEN --hipchat_username=XMPP_USER --hipchat_password=XMPP_PASSWORD"]],["h3","帮助信息"],["p","Slack"],["pre",{lang:"shell",highlighted:'micro help\n\nderegister service <span class="token punctuation">[</span>definition<span class="token punctuation">]</span> <span class="token operator">-</span> Deregisters a service\necho <span class="token punctuation">[</span>text<span class="token punctuation">]</span> <span class="token operator">-</span> Returns the <span class="token punctuation">[</span>text<span class="token punctuation">]</span>\nget service <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">-</span> Returns a registered service\nhealth <span class="token punctuation">[</span>service<span class="token punctuation">]</span> <span class="token operator">-</span> Returns health of a service\nhello <span class="token operator">-</span> Returns a greeting\nlist services <span class="token operator">-</span> Returns a list of registered services\nping <span class="token operator">-</span> Returns pong\nquery <span class="token punctuation">[</span>service<span class="token punctuation">]</span> <span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token punctuation">[</span>request<span class="token punctuation">]</span> <span class="token operator">-</span> Returns the response <span class="token keyword">for</span> a service query\nregister service <span class="token punctuation">[</span>definition<span class="token punctuation">]</span> <span class="token operator">-</span> Registers a service\nthe three laws <span class="token operator">-</span> Returns the three laws of robotics\ntime <span class="token operator">-</span> Returns the server time'},["code","micro help\n\nderegister service [definition] - Deregisters a service\necho [text] - Returns the [text]\nget service [name] - Returns a registered service\nhealth [service] - Returns health of a service\nhello - Returns a greeting\nlist services - Returns a list of registered services\nping - Returns pong\nquery [service] [method] [request] - Returns the response for a service query\nregister service [definition] - Registers a service\nthe three laws - Returns the three laws of robotics\ntime - Returns the server time"]],["h2","增加命令"],["p","小机器人是根据文本消息匹配命令执行指定功能。"],["h3","编写命令"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token string">"github.com/micro/go-micro/v2/agent/command"</span>\n\n<span class="token keyword">func</span> <span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>\n\tusage <span class="token operator">:=</span> <span class="token string">"ping"</span>\n\tdescription <span class="token operator">:=</span> <span class="token string">"Returns pong"</span>\n\n\t<span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">NewCommand</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span> usage<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"pong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import "github.com/micro/go-micro/v2/agent/command"\n\nfunc Ping() command.Command {\n\tusage := "ping"\n\tdescription := "Returns pong"\n\n\treturn command.NewCommand("ping", usage, desc, func(args ...string) ([]byte, error) {\n\t\treturn []byte("pong"), nil\n\t})\n}']],["h3","注册命令"],["p","把命令加到命令映射表中，命令的 key 可以通过",["strong","golang/regexp.Match"],"正则匹配。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token string">"github.com/micro/go-micro/v2/agent/command"</span>\n\n<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tcommand<span class="token punctuation">.</span>Commands<span class="token punctuation">[</span><span class="token string">"^ping$"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import "github.com/micro/go-micro/v2/agent/command"\n\nfunc init() {\n\tcommand.Commands["^ping$"] = Ping()\n}']],["h3","重构建 Micro 服务"],["p","打包二进制文件"],["pre",{lang:"shell",highlighted:'cd github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>micro\n\n<span class="token operator">/</span><span class="token operator">/</span> 本地打包\ngo build <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go\n\n<span class="token operator">/</span><span class="token operator">/</span> docker方式打包\nCGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux go build <span class="token operator">-</span>a <span class="token operator">-</span>installsuffix cgo <span class="token operator">-</span>ldflags <span class="token string">\'-w\'</span> <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go'},["code","cd github.com/micro/micro\n\n// 本地打包\ngo build -i -o micro ./main.go\n\n// docker方式打包\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-w' -i -o micro ./main.go"]],["h2","增加新的输入源"],["p","输入针对通信软件是插件化的，比如 Slack、HipChat、XMPP、IRC、SMTP 等等。"],["p","新的输入源可以通过下列方式增加。"],["h3","新增输入源"],["p","输入源要满足下面的接口。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Input <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 命令行接口标识</span>\n\t<span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cli<span class="token punctuation">.</span>Flag\n\t<span class="token comment" spellcheck="true">// 使用命令行上下文初始化</span>\n\t<span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// 输入流事件</span>\n\t<span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n\t<span class="token comment" spellcheck="true">// 开始输入</span>\n\t<span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// 输入终止</span>\n\t<span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// 输入源名</span>\n\t<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>'},["code","type Input interface {\n\t// 命令行接口标识\n\tFlags() []cli.Flag\n\t// 使用命令行上下文初始化\n\tInit(*cli.Context) error\n\t// 输入流事件\n\tStream() (Conn, error)\n\t// 开始输入\n\tStart() error\n\t// 输入终止\n\tStop() error\n\t// 输入源名\n\tString() string\n}"]],["h3","注册输入"],["p","把新的输入注册到映射表中"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token string">"github.com/micro/go-micro/v2/agent/input"</span>\n\n<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tinput<span class="token punctuation">.</span>Inputs<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> MyInput\n<span class="token punctuation">}</span>'},["code",'import "github.com/micro/go-micro/v2/agent/input"\n\nfunc init() {\n\tinput.Inputs["name"] = MyInput\n}']],["h3","重构建"],["p","二进制打包"],["pre",{lang:"shell",highlighted:'cd github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>micro\n\n<span class="token operator">/</span><span class="token operator">/</span> 本地打包\ngo build <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go\n\n<span class="token operator">/</span><span class="token operator">/</span> docker打包\nCGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux go build <span class="token operator">-</span>a <span class="token operator">-</span>installsuffix cgo <span class="token operator">-</span>ldflags <span class="token string">\'-w\'</span> <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go'},["code","cd github.com/micro/micro\n\n// 本地打包\ngo build -i -o micro ./main.go\n\n// docker打包\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-w' -i -o micro ./main.go"]],["h2","命令即服务"],["p","小机器人支持创建服务式的命令。"],["h3","是怎么工作的"],["p","小机器人值班时，它会监测它命名空间中注册的服务，默认的命名空间是",["code","go.micro.bot"],"。所有在这个命名空间内的服务都会自动加到可执行列表中，当命令执行后，小机器人就会通过方法",["code","Command.Exec"],"来调用服务。它也支持使用",["code","Command.Help"]," 获取使用信息，当然是注册时要把帮助信息写上。"],["p","服务的接口示例如下，也可以在",["a",{title:null,href:"https://github.com/micro/go-micro/agent/blob/master/proto/bot.proto"},"go-bot/proto"],"上找到。"],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\npackage go<span class="token punctuation">.</span>micro<span class="token punctuation">.</span>bot<span class="token comment" spellcheck="true">;</span>\n\nservice Command {\n\trpc <span class="token function">Help</span><span class="token punctuation">(</span>HelpRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelpResponse<span class="token punctuation">)</span> {}<span class="token comment" spellcheck="true">;</span>\n\trpc <span class="token function">Exec</span><span class="token punctuation">(</span>ExecRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>ExecResponse<span class="token punctuation">)</span> {}<span class="token comment" spellcheck="true">;</span>\n}\n\nmessage HelpRequest {\n}\n\nmessage HelpResponse {\n\tstring usage <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n\tstring description <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage ExecRequest {\n\trepeated string args <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage ExecResponse {\n\tbytes result <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n\tstring error <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\npackage go.micro.bot;\n\nservice Command {\n\trpc Help(HelpRequest) returns (HelpResponse) {};\n\trpc Exec(ExecRequest) returns (ExecResponse) {};\n}\n\nmessage HelpRequest {\n}\n\nmessage HelpResponse {\n\tstring usage = 1;\n\tstring description = 2;\n}\n\nmessage ExecRequest {\n\trepeated string args = 1;\n}\n\nmessage ExecResponse {\n\tbytes result = 1;\n\tstring error = 2;\n}']],["h3","示例"],["p","这里有一个示例，以调用微服务来执行打印命令"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"fmt"</span>\n\t<span class="token string">"strings"</span>\n\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n\t<span class="token string">"golang.org/x/net/context"</span>\n\n\tproto <span class="token string">"github.com/micro/go-micro/v2/agent/proto"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Command <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Help 返回使用帮助信息</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Help</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelpRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelpResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// Usage 应该要包含命令的名称</span>\n\trsp<span class="token punctuation">.</span>Usage <span class="token operator">=</span> <span class="token string">"echo"</span>\n\trsp<span class="token punctuation">.</span>Description <span class="token operator">=</span> <span class="token string">"This is an example bot command as a micro service which echos the message"</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Exec 指行命令</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>ExecRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>ExecResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Args<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token comment" spellcheck="true">// rsp.Error，如果发生错误，可以设置rsp.Error</span>\n\t<span class="token comment" spellcheck="true">// 注意：函数（Exec）返回的错误则只是服务这一级的错误信息，Exec调用方法会收到这个错误，而rsp.Error是返</span>\n\t<span class="token comment" spellcheck="true">// 回给命令执行处的错误</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tservice <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"go.micro.bot.echo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tproto<span class="token punctuation">.</span><span class="token function">RegisterCommandHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\n\t"github.com/micro/go-micro/v2"\n\t"golang.org/x/net/context"\n\n\tproto "github.com/micro/go-micro/v2/agent/proto"\n)\n\ntype Command struct{}\n\n// Help 返回使用帮助信息\nfunc (c *Command) Help(ctx context.Context, req *proto.HelpRequest, rsp *proto.HelpResponse) error {\n\t// Usage 应该要包含命令的名称\n\trsp.Usage = "echo"\n\trsp.Description = "This is an example bot command as a micro service which echos the message"\n\treturn nil\n}\n\n// Exec 指行命令\nfunc (c *Command) Exec(ctx context.Context, req *proto.ExecRequest, rsp *proto.ExecResponse) error {\n\trsp.Result = []byte(strings.Join(req.Args, " "))\n\t// rsp.Error，如果发生错误，可以设置rsp.Error\n\t// 注意：函数（Exec）返回的错误则只是服务这一级的错误信息，Exec调用方法会收到这个错误，而rsp.Error是返\n\t// 回给命令执行处的错误\n\treturn nil\n}\n\nfunc main() {\n\tservice := micro.NewService(\n\t\tmicro.Name("go.micro.bot.echo"),\n\t)\n\n\tservice.Init()\n\n\tproto.RegisterCommandHandler(service.Server(), new(Command))\n\n\tif err := service.Run(); err != nil {\n\t\tfmt.Println(err)\n\t}\n}']]],meta:{order:5,title:"机器人",filename:"docs/micro/bot.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h1",href:"#micro-bot",title:"micro bot"},"micro bot"]],["li",["a",{className:"bisheng-toc-h2",href:"#现在支持的输入方式",title:"现在支持的输入方式"},"现在支持的输入方式"]],["li",["a",{className:"bisheng-toc-h2",href:"#准备上车",title:"准备上车"},"准备上车"]],["li",["a",{className:"bisheng-toc-h2",href:"#增加命令",title:"增加命令"},"增加命令"]],["li",["a",{className:"bisheng-toc-h2",href:"#增加新的输入源",title:"增加新的输入源"},"增加新的输入源"]],["li",["a",{className:"bisheng-toc-h2",href:"#命令即服务",title:"命令即服务"},"命令即服务"]]]}}}]);